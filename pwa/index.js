"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
* @license
* Copyright Google Inc. All Rights Reserved.
*
* Use of this source code is governed by an MIT-style license that can be
* found in the LICENSE file at https://angular.io/license
*/
const core_1 = require("@angular-devkit/core");
const schematics_1 = require("@angular-devkit/schematics");
const config_1 = require("../utility/config");
function addServiceWorker(options) {
    return (host, context) => {
        context.logger.debug('Adding service worker...');
        const swOptions = Object.assign({}, options);
        delete swOptions.title;
        return schematics_1.externalSchematic('@schematics/angular', 'service-worker', swOptions)(host, context);
    };
}
function getIndent(text) {
    let indent = '';
    let hitNonSpace = false;
    text.split('')
        .forEach(char => {
        if (char === ' ' && !hitNonSpace) {
            indent += ' ';
        }
        else {
            hitNonSpace = true;
        }
    }, 0);
    return indent;
}
function updateIndexFile(options) {
    return (host, context) => {
        const workspace = config_1.getWorkspace(host);
        const project = workspace.projects[options.project];
        let path;
        if (project && project.architect && project.architect.build &&
            project.architect.build.options.index) {
            path = project.architect.build.options.index;
        }
        else {
            throw new schematics_1.SchematicsException('Could not find index file for the project');
        }
        const buffer = host.read(path);
        if (buffer === null) {
            throw new schematics_1.SchematicsException(`Could not read index file: ${path}`);
        }
        const content = buffer.toString();
        const lines = content.split('\n');
        let closingHeadTagLineIndex = -1;
        let closingHeadTagLine = '';
        let closingBodyTagLineIndex = -1;
        let closingBodyTagLine = '';
        lines.forEach((line, index) => {
            if (/<\/head>/.test(line) && closingHeadTagLineIndex === -1) {
                closingHeadTagLine = line;
                closingHeadTagLineIndex = index;
            }
            if (/<\/body>/.test(line) && closingBodyTagLineIndex === -1) {
                closingBodyTagLine = line;
                closingBodyTagLineIndex = index;
            }
        });
        const headTagIndent = getIndent(closingHeadTagLine) + '  ';
        const itemsToAddToHead = [
            '<link rel="manifest" href="manifest.json">',
            '<meta name="theme-color" content="#1976d2">',
        ];
        const textToInsertIntoHead = itemsToAddToHead
            .map(text => headTagIndent + text)
            .join('\n');
        const bodyTagIndent = getIndent(closingBodyTagLine) + '  ';
        const itemsToAddToBody = '<noscript>Please enable JavaScript to continue using this application.</noscript>';
        const textToInsertIntoBody = bodyTagIndent + itemsToAddToBody;
        const updatedIndex = [
            ...lines.slice(0, closingHeadTagLineIndex),
            textToInsertIntoHead,
            ...lines.slice(closingHeadTagLineIndex, closingBodyTagLineIndex),
            textToInsertIntoBody,
            ...lines.slice(closingBodyTagLineIndex),
        ].join('\n');
        host.overwrite(path, updatedIndex);
        return host;
    };
}
function addManifestToAssetsConfig(options) {
    return (host, context) => {
        const workspacePath = config_1.getWorkspacePath(host);
        const workspace = config_1.getWorkspace(host);
        const project = workspace.projects[options.project];
        if (!project) {
            throw new Error(`Project is not defined in this workspace.`);
        }
        const assetEntry = core_1.join(core_1.normalize(project.root), 'src', 'manifest.json');
        if (!project.architect) {
            throw new Error(`Architect is not defined for this project.`);
        }
        const architect = project.architect;
        ['build', 'test'].forEach((target) => {
            const applyTo = architect[target].options;
            if (!applyTo.assets) {
                applyTo.assets = [assetEntry];
            }
            else {
                applyTo.assets.push(assetEntry);
            }
        });
        host.overwrite(workspacePath, JSON.stringify(workspace, null, 2));
        return host;
    };
}
function default_1(options) {
    return (host, context) => {
        const workspace = config_1.getWorkspace(host);
        if (!options.project) {
            throw new schematics_1.SchematicsException('Option "project" is required.');
        }
        const project = workspace.projects[options.project];
        if (project.projectType !== 'application') {
            throw new schematics_1.SchematicsException(`PWA requires a project type of "application".`);
        }
        const assetPath = core_1.join(project.root, 'src', 'assets');
        const sourcePath = core_1.join(project.root, 'src');
        options.title = options.title || options.project;
        const templateSource = schematics_1.apply(schematics_1.url('./files/assets'), [
            schematics_1.template(Object.assign({}, options)),
            schematics_1.move(assetPath),
        ]);
        return schematics_1.chain([
            addServiceWorker(options),
            schematics_1.branchAndMerge(schematics_1.chain([
                schematics_1.mergeWith(templateSource),
            ])),
            schematics_1.mergeWith(schematics_1.apply(schematics_1.url('./files/root'), [
                schematics_1.template(Object.assign({}, options)),
                schematics_1.move(sourcePath),
            ])),
            updateIndexFile(options),
            addManifestToAssetsConfig(options),
        ])(host, context);
    };
}
exports.default = default_1;
//# sourceMappingURL=data:application/json;base64,